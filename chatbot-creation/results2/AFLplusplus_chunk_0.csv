idea title,idea description,skills,difficulty,duration
Start rewriting AFL++'s afl-fuzz in Rust as a frontend of LibAFL,"Rewrite AFL++'s afl-fuzz in Rust to be compatible with the current C implementation. Core logic is in LibAFL, but rewriting is a non-trivial task.","Rust, C, system programming, software engineering",medium,350 hours
Extend Forkserver (#111) to work on windows including https://github.com/sslab-gatech/winnie/tree/master/forklib from Winnie in libafl_targets,Extend Forkserver to work on Windows and provide working examples combined with SanCov and libafl_frida.,"Rust, C, system programming, win32 development",medium,175 hours
"Frida ASan and CmpLog for Windows and other architectures (arm, arm64, x86, x86_64)",Port code from C to Rust for Frida ASan and CmpLog on various architectures. Provide working examples.,"Rust, C, assembly, system programming, win32 development",medium,175 hours
Injectable libafl_frida into running targets + Javascript API support for libafl_frida and libafl_sugar,Inject libafl_frida into running targets and add Javascript API support. May involve contributions to Frida's Rust bindings.,"Rust, C, assembly, system programming, win32 development",medium,175 hours
Implement syscall emulation for filesystem and network in libafl_qemu,Implement syscall emulation for filesystem and network in libafl_qemu. Hook network API and create emulator filesystem.,"Rust, C, system programming",medium,175 hours
Implement the Pangolin mutator on top of the existing concolic execution API,Implement the Pangolin mutator on top of the existing concolic execution API and provide working examples.,"Rust, C++, experience in symbolic execution",medium,175 hours
LibAFL Workers / RemoteWorkerLauncherStage + RemoteWorkerCollectorStage,Implement LibAFL Workers / RemoteWorkerLauncherStage + RemoteWorkerCollectorStage and provide working examples.,Rust,medium,175 hours
Implement AFLGo,Implement the AFLGo directed fuzzer and provide working examples.,"Rust, C, C++, LLVM",medium,175 hours
Create a libafl qemu based clone of afl-qemu-trace to be used in AFL++,Create a feature equivalent clone of afl-qemu-trace with all supported env vars.,"Rust, C",medium,175 hours
Adapt kAFL / Nyx to LibAFL QEMU,Integrate hypervisor-based fuzzing to LibAFL QEMU with an up-to-date kernel module and integration with the current implementation.,"Rust, C, system programming, software engineering, linux kernel",medium,350 hours
