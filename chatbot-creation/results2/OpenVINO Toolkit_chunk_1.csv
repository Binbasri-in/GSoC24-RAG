idea title,idea description,skills,difficulty,duration
A general OpenVINO performance benchmarking suite for Vision-LLM models,The goal of this project is to provide a unified suite for OpenVINO Vision-Language model performance benchmarking for both uni-modal and joint-modal tasks. The benchmarking suite should include the following functions: Be able to load and convert the specific models from Huggingface: both PyTorch and OpenVINO IR models should be supported and probably compressed model as well (INT8). Provide an accuracy checker for the model accuracy check. Performance benchmarking scripts that work for unimodal/joint-modal tasks.,"C/C++, Python, Good understanding of transformer models and vision-LLM models, Experience working with Huggingface LLM models",Hard,175 hours
Add time-series anomaly detection support to Anomalib,"Anomalib currently only contains visual anomaly detection algorithms that operate in the image- and video domain. However, the principles of anomaly detection can be applied to other domains, such as audio, as well. The goal of this project is to add support for anomaly detection in 1D (time-series) data, such as audio signals. The following components would need to be added/modified to achieve time-series anomaly detection support: Pytorch-Lightning compatible dataset adapters for reading 1D-data. At least 1 fully functional time-series anomaly detection model. Metrics and visualization utilities for qualitative and quantitative evaluation of the model’s performance.","Basic ML knowledge, Signal processing basics, Python",Medium to hard,350 hours
AnomalyGPT: Integrating Vision Language Models (VLMs) in Anomalib for zero- and few-shot anomaly detection,"The goal of this project is to integrate the capabilities of Visual Language Models (VLMs) within the anomalib framework. Anomalib is a deep learning library designed for anomaly detection research. VLMs could be used for anomaly detection purposes by prompting the VLM to determine if an image contains an anomaly or not. An advantage of this approach over classical anomaly detection techniques is that a VLM can explain its decision in natural language, which benefits the interpretability of the predictions. The first part of the project consists of creating a coupling between Anomalib and OpenAI’s ChatGPT API. The student will use the ChatGPT UI to create a custom GPT that is instructed to detect anomalies in images using ChatGPT’s internal VLM. On the Anomalib side, the student will create a model wrapper that interacts with the GPT through API calls so that the GPT’s predictions can be used within the Anomalib framework. Design choices will need to be made around parsing the responses of the GPT and presenting the predictions to the user. The student will conduct a series of experiments to investigate how the performance of the GPT compares to other Anomalib models on structural and logical anomaly detection datasets such as MVTec AD and MVTec LOCO. Optional extensions of the project include replacing the ChatGPT model with a locally deployed open-source VLM such as LLaVa, and implementing a simple UI that allows a discourse-style interaction with the model.","Proficient in Python, Familiar with deep learning frameworks like PyTorch Lightning, Understanding of anomaly detection principles, Experience with anomalib",Medium to hard,350 hours
Synthetic Anomaly Generation for Threshold Selection and Model Evaluation in Anomalib,"Anomalib is a Python library designed to facilitate visual anomaly detection research, where the task is to identify anomalous, or abnormal images in a dataset. While Anomalib’s models only need normal images during training, some examples of anomalous images are still needed in the validation and testing stages for threshold selection and model evaluation. In real-world use-cases however, anomalous samples may not be available at training time, preventing accurate computation of these metrics. The purpose of this project is to create a synthetic anomaly generation module within Anomalib that will allow researchers to generate a wide variety of synthetic anomalies for the purpose of selecting appropriate thresholds and evaluating anomaly detection models. The project will involve the development of algorithms that can introduce anomalies into normal datasets in a controllable and scalable manner. These synthetic anomalies may range from simple, like noise injection, to complex, like generating contextually out-of-place objects using advanced generative models such as diffusion models.","Proficiency in Python, Experience with deep learning libraries such as PyTorch Lightning, Understanding of machine/deep learning, Basic understanding of generative models, Understanding of anomaly detection principles, Experience with anomalib",Hard,350 hours
Extending OpenVINO's llama.cpp community plugin for configurable GGML inferencing backend,"We are currently preparing a community plugin for OpenVINO inference that would take specially prepared IR models known to correspond to llama.cpp-supported architectures, parse them for weights and other GGML-required parameters and defer actual inference to the llama.cpp/GGML executors. The initial version of the plugin will only be limited to standard GGML inference without HW-specific acceleration. Since in its current state the llama.cpp/GGML executors already support HW-accelerated inference as well (via CUDA, and more recently, SYCL), the natural extension of this approach would be to make the community plugin accept options pertaining to the actual GGML backend selection. In this fashion a user flow would be enabled that would allow the developers to execute certain IR-format models with llama.cpp/GGML instead of regular OpenVINO plugins, while still using the familiar OpenVINO APIs such as ov::Model and ov::InferRequest, since the dispatching of the loads to the llama.cpp/GGML would be abstracted under the OpenVINO plugin system and the implementation of the future plugin.","C/C++, GTest, OpenVINO API, Github Actions",Medium,175 hours
Benchmarking PyTorch Performance with TorchBench on EC2 Instances,"The goal of this project is to evaluate and compare the performance of PyTorch's torch.compile OpenVINO backend against the Stock PyTorch using TorchBench, a collection of open-source benchmarks for evaluating PyTorch performance. The benchmarking will be performed on various EC2 CPU instances using an automated manner, leveraging either the EC2 API or Amazon Sagemaker. The benchmarking script/methodology should be reproducible, allowing the community to reproduce and customize.","Python, PyTorch, OpenVINO, Docker, EC2 API or Amazon SageMaker",Medium,350 hours
OpenVINO Messenger AI-Assistant for an AI PC,"People use messengers daily not just for communication, but also for reading news and gathering information on a variety of topics by subscribing to channels. For any popular messenger implement a Desktop AI-Assistant for AI PC, which can read messages from a specified time interval and use Retrieval-augmented Generation (RAG) to enhance the local Language Model (LLM) with this private data, providing useful information such as a daily digest. Users should be able to interact with the OpenVINO Messenger AI Assistant to ask questions related to any discussions extracted from the messenger.","Python or C++, LLMs, RAG, UI/Qt",Medium,350 hours
Eyes health utilizing OpenVINO and Neural Processing Unit (NPU) on an AI PC,"Many people spend a significant portion of their lives sitting in front of a PC, which can lead to eye fatigue. However, using a webcam it is possible to monitor and manage the amount of time a user spends in front of a computer screen. Implement application uses a webcam to detect the user's gaze, thereby determining the duration of screen time. If the user exceeds a certain limit, the application sends an alert suggesting a break. This feature helps to prevent excessive screen time and promotes healthier computer usage habits. The application also includes a user interface that allows users to set intervals for microbreaks. In addition, the application provides reports on the amount of time spent looking at the display. To optimize energy efficiency and performance, the application is to be designed to utilize the Neural Processing Unit (NPU) on an AI PC. This ensures that the application runs smoothly and efficiently, minimizing its impact on the computer's overall performance.","Python, Deep Learning, Computer Vision",Medium,175 hours
