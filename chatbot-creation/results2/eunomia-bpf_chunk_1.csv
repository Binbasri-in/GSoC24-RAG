idea title,idea description,skills,difficulty,duration
Fuzzer,"This project aims to develop or integrate a fuzzer for bpftime, using tools like Google's Buzzer or syzkaller. The fuzzer will systematically test bpftime to uncover any potential bugs, memory leaks, or vulnerabilities, ensuring a more secure and stable runtime environment. Besides, we also need to add kernel eBPF test for bpftime to improve compatibility. You also need to enable the fuzzer and eBPF tests in CI.","C/C++, system programming, software testing methodologies, fuzz testing, eBPF",Easy,~90 hours
Living patching distributed RocksDB with shared IO and Network Interface over io_uring,"This project aims to develop a living patching mechanism for distributed RocksDB with shared IO and network interfaces over io_uring, enabling dynamic and efficient performance optimization. This project will empower RocksDB with remote I/O and network interfaces, allowing it to leverage the performance benefits of io_uring and shared interfaces.","C/C++, system programming, RocksDB, io_uring implementation, eBPF programs",Hard,~350 hours
Userspace eBPF for Userspace File System,"This project focuses on utilizing bpftime to pre-process file system operations like caching and metadata queries in user space, minimizing system call overhead. It aims to develop a kernel bypass mechanism for file systems in user space using eBPF and enable dynamic strategy adjustment based on performance data.","C/C++, system-level programming, file system concepts, eBPF, fuse",Hard,~350 hours
BPFTime Profiling and Machine Learning Prediction for far memory or distributed shared memory management,This project aims to implement application-specific metrics collection and profiling in BPFTime and write eBPF programs for far memory or distributed shared memory management. The goal is to provide the right metrics for memory scheduling and access pattern prediction.,"C/C++, system programming, kernel memory subsystem, memory management, eBPF programs",Hard,~350 hours
Large Language Model specific metrics observability in BPFTime,This project focuses on providing metrics for large language model training or inference by programming eBPF programs to collect the right metrics and perform the right scheduling. It aims to implement gdb rwatch and GPU metrics in BPFTime.,"C/C++, system programming, large language model architecture, GPU metrics collection, gdb",Hard,~350 hours
