idea title,idea description,skills,difficulty,duration
Google Summer of Code (GSoC) 2024,"The SPCL group applied as an organization to the Google Summer of Code (GSoC) program for our open-source projects in data-centric programming and serverless computing. You can find here student project proposals, advice on applying, and introductions to each project to start using our software. Learn more on how to apply and write your proposal from the contributor guideline. You will also find there the proposal template. Get in touch with mentors and discuss the project ideas using the provided email address and reach out to them on our Mattermost server - join the public Google Summer of Code channel. Our project ideas are grouped into two categories: serverless computing and data-centric programming framework. Serverless: At SPCL, we develop several open-source projects that target Function-as-a-Service (FaaS), a new cloud paradigm concerned with writing stateless and serverless functions. Our benchmarking suite SeBS provides automatic build, deployment, and invocations of representative serverless functions on several commercial and open-source FaaS platforms. We published and develop a serverless ZooKeeper implementation FaaSKeeper, a high-performance and RDMA-based serverless platform rFaaS, and a serverless collectives library FMI for parallel and distributed applications.","Python, Docker, cloud experience, Node.js",Easy/Medium,"90 hours (small) or 175 hours (medium), depending on the project scope"
[SeBS] Keeping up with clouds,"In SeBS, we support AWS Lambda, Google Cloud Functions, Azure Functions, and OpenWhisk. Since the original release of SeBS, we have seen a lot of changes: growing popularity of ARM functions on AWS, new Azure Functions runtime versions, Google Cloud Functions version 2, and Knative becoming one of the most popular open-source serverless platforms. Adding support for new runtimes and platforms would help SeBS stay usable and competitive in the changing world of clouds.","Python, Docker",Easy/Medium,"175 hours (medium) or 350 hours (large), depending on the project scope"
[SeBS] New serverless benchmarks,"In SeBS, we provide a representative set of functions, and we have developed a set of serverless workflows that will be included in the upcoming release. However, the serverless field is constantly changing, and new types of applications are being 'FaaS-ified'. Therefore, we would like to extend our benchmarking suite with new function candidates, such as utility functions (PDF generation, antivirus scanning) or scientific benchmarks, new invocation types (functions invoked on changes in object storage), and new workflows.","Python, Docker",Easy/Medium,"175 hours (medium) or 350 hours (large), depending on the project scope (number of benchmarks)"
[SeBS] New performance experiments,"SeBS includes automatic experiments that evaluate specific performance features of serverless platforms, such as latency and cost of function invocations or invocation overheads. The goal of the project would be to add new experiments that use microbenchmarks and serverless functions to evaluate interesting metrics and characteristics of a serverless runtime. An example would be a flexible and configurable workload generator, based on JMeter or a similar system, to measure throughput, scalability, and the elasticity of the platform when varying workloads. Another goal would be to extend existing trigger types with storage and queues to understand the latency and throughput of synchronous and asynchronous invocations and measure the latency of pipeline invocations. Do you have another idea for an interesting experiment? Let us know!",Python,Medium/Difficult,"175 hours (medium) or 350 hours (large), depending on the project scope (number and scope of experiments)"
[SeBS] Benchmarking serverless applications,"In SeBS, we focus on serverless functions and workflows. However, serverless is a rapidly changing field, and a new trend is building entire applications from serverless functions. These include, for example, using various cloud triggers to compose functions and porting microservice benchmarks to serverless. Users of SeBS would greatly benefit from being able to benchmark such complex applications and understand the performance bottlenecks of FaaS platforms. Based on existing open-source implementations, one should propose representative applications covering new, exciting use cases of serverless.","Python, Docker, C++/Go, cloud experience",Medium/Difficult,350 hours (large)
[rFaaS] Serverless MPI functions,"The HPC community has been working on supporting malleable and evolving applications in MPI, i.e., applications that require dynamic adjusting of the number of workers. Examples include Flex-MPI and invasive MPI. Serverless functions could be a perfect runtime for such a task - they can be allocated and removed on-the-fly, aiding the elasticity of MPI applications. However, MPI runtimes are tightly coupled with batch systems, and reimplementing the MPI interface with a new serverless-aware library would prevent us from using optimized communication methods. Instead, in this project, we want to investigate an alternative approach - analyze the process runtime of an open-source MPI implementation, such as the PMI component of OpenMPI. We want to replace the process management with an experimental prototype that will allocate MPI processes as rFaaS functions. With initialized processes and communication, functions can execute MPI code and benefit from tuned implementations of MPI collectives.","C++, HPC, OpenMPI/MPICH internals",Difficult,350 hours (large)
[FaaSKeeper] Using serverless ZooKeeper in Apache projects,"FaaSKeeper implements standard ZooKeeper functionalities and includes a new client for Python applications. ZooKeeper has been used by many Java and Scala applications in the Apache project, e.g., Kafka and HBase. Since they use a limited set of features that might be covered by FaaSKeeper, demonstrating the integration of our function-based implementation would be a significant improvement to the project. The goal of the project would be to identify a relevant project(s) that could use FaaSKeeper instead of ZooKeeper, define the set of API calls that have to be implemented, and propose a new Java client library that offloads ZooKeeper calls to the REST cloud API instead of using ZooKeeper protocol.","Python, Java, ZooKeeper",Medium/Difficult,350 hours (large)
[FMI] Optimized and multi-cloud serverless collectives,"FMI brings collective operations and point-to-point communication to serverless functions, using cloud storage and TCP connections with NAT hole punching. However, the primary implementation of FMI targets the AWS cloud. The first goal of the project would be porting to a new cloud, such as Google Cloud Functions. The second goal would be optimizing communication. For example, multi-core functions on AWS Lambda allow for the execution of multiple function workers as threads. There, we can use the local shared memory environment for communication. Another example would be implementing variants of standard and proven collective communication algorithms that target communication on very small (latency-bound) and very-large messages (bandwidth-bound).","Python, cloud experience, C++/Go",Medium/Difficult,350 hours (large)
