idea title,idea description,skills,difficulty,duration
Support for the new reconciliation protocol,"The reconciliation feature in OpenRefine relies on a unified protocol , which is used to communicate with various web services offering data matching functionalities for various data sources . The W3C Entity Reconciliation Community Group has been working on a new version of this protocol , addressing a number of problems in the current one . For instance , it is currently very cumbersome to reconcile entities in OpenRefine when one does not have a column with names of those entities , because the existing protocol assumes that those names must always be provided ( # 6044 ) . We would like to add support for the new protocol to address this issue , and various others ( see below ) . We would like to maintain support for the existing protocol , so that existing reconciliation services continue to work . As we do this work , we might be able to bring up issues to the W3C group , so that the new specifications can be improved accordingly . This might be a good opportunity to clean up our current reconciliation code so that it bases itself on an external library instead .",JavaScript & Java,Intermediate,350h
Better testing utilities for extension development,"OpenRefine 's functionality can be augmented via extensions . However , developing extensions outside of OpenRefine 's code base is not so easy , in particular regarding debugging and testing . Our sample extension is included in OpenRefine 's repository , making it of little use to demonstrate how to develop an extension as a third-party . The goal of this project would be to improve this by : develop a workflow to run OpenRefine with the Java debugger enabled , to debug an extension via commonly-used IDEs ( IntelliJ IDEA , Eclipse , VSCode ) . This would help developers interactively develop their extension in its actual execution environment . develop utilities to run Cypress tests on an extension . The utility should download a specific version of OpenRefine and run it on a test workspace that contains the extension to test . This could then be used to run Cypress tests against the extension . provide a `` model '' extension , developed outside of OpenRefine 's repository , following the best practices ( Java and Cypress tests , CI , only using clearly documented extension points ) , that people can take inspiration from . As an example extension , we could either revamp an existing extension ( such as the Commons extension ) or create a new one . We have a page with some ideas for new extensions . ideally , clean up the existing documentation , making sure it is up to date and provides all the necessary information . We may take inspiration from external resources written on this subject , such as Giuliano Tortoreto 's guide or Owen Stephen 's blog post .","Java, Cypress, CI/CD",Intermediate,350h
