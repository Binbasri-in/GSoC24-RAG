idea title,idea description,skills,difficulty,duration
Version Constraint Resolution (fpm),"The current decentralized package system in fpm allows dependencies to be fetched via a git repository URL. As part of this, a git tag or commit can be given to require a specific version of a dependency. There is however no way of specifying version compatibility requirements (e.g. >= 1.0.0, < 2.0.0) and no way to resolve such requirements across a dependency tree. This project will involve: Defining a manifest syntax for version compatibility matching Implementing support in fpm for solving a set of version compatibility constraints A possible approach would be to interface with an existing satisfiability solver such as: libsolv: interface via iso_c_binding as a separate fpm package See also: existing options for version matching syntax: conda npm cargo Expected outcomes: Implemented a working version constraint mechanism in fpm","Fortran programming, experience with one or more build systems",Intermediate,350 hours
Build Process Enhancements (fpm),"Fortran Package Manager (fpm) is pivotal for long-term Fortran success. This GSoC project aims to improve fpm’s build process by improving dependency detection, optimizing linking, implementing shared libraries, ensuring safe concurrent builds, and introducing external Makefile generation. The project will address the following tasks: Dependency Detection: Enhance fpm’s dependency detection to minimize rebuilds by parsing or hashing module/submodule files or parsing procedure interfaces in module files. fpm should not rebuild dependencies to a module whose public interface has not changed. Linking Optimization: Replace one-liner linking with static libraries to prevent line buffer overflow in Windows builds. Shared Library Implementation: Introduce support for shared library targets for project flexibility. Safe Concurrent Builds: Implement file locking for safe concurrent invocations, especially during OpenMP builds, to prevent data corruption. External Makefile Generation: Enable generation of external Makefiles akin to cmake -G for advanced project configuration. Expected Outcomes: Enhanced dependency tracking and reduced rebuild times. Improved reliability in linking, particularly in Windows. Increased project versatility with shared library support. Safer concurrent builds through file locking. Greater project configuration flexibility with external Makefile generation.","Fortran programming, experience with one or more build systems",Intermediate,175 hours
Extended Testing Support (fpm),"The aim of this project is to create a manifest specification to provide defaults to executable targets in fpm projects. Information can be passed as environment variables, command-line arguments or as a runner. Desired features include: Programs should have a way to find resources of which the relative position within the project source directory is known. The current binary directory to access other targets within a project. Default runners like mpirun/cafrun or scripts from test frameworks should be usable to launch programs. A general syntax to define environment variables and command-line arguments should be defined. Some features should be implemented directly in fpm, while more elaborated functionality could be implemented in a separate fpm package as an official Fortran-lang fpm package. Expected outcomes: fpm has broader and deeper testing functionality",Fortran programming and writing unit tests,Easy,175 hours
Export build order and compile_commands.json (fpm),fpm has the ability to automatically determine the build order of a project's source files. This information is valuable to third party tools such as language servers and code analysis tools. The goal of this project is to export the build order of a project's source files in the compile_commands.json. The second leg of this project is to implement the full syntax of compile_commands.json as described in the Clang documentation. This would bring fpm a step closer to being compatible with other build tools. Expected outcomes: fpm will export a complete compile_commands.json file.,"Fortran programming, experience with one or more build systems",Hard,350 hours
Support of external third-party preprocessors,"Adding support for external third-party preprocessors is important for fpm due to the additional flexibility they provide when building complex packages. In particular, the Fortran-lang stdlib project exploits the powerful fypp preprocessor for code generation and the support of fypp by fpm is required for stdlib to eventually be compatible as an fpm package. This project will require to: Modify fpm to optionally invoke a third-party preprocessor before compiling sources; Extend the current manifest syntax of fpm for defining preprocessor variables in a preprocessor-independent manner, if necessary; Extend the current manifest syntax of fpm for specifying a third-party preprocessor and the corresponding file suffixes, if necessary; Passe defined preprocessor variables to built-in preprocessors if necessary; Third-party preprocessors should be specified on a per-project basis, i.e. multiple preprocessors might be required, and fpm should be able to report useful errors for missing third-party preprocessors. Expected outcomes: fpm has a working preprocessing capability","Fortran, C, or Python programming, experience using one or more preprocessors",Easy,175 hours
